import React, { useState, useEffect } from 'react';
import './App.css';
import * as signalR from '@microsoft/signalr';

function App() {
  const [connection, setConnection] = useState<signalR.HubConnection | null>(null);
  const [messages, setMessages] = useState<string[]>([]);
  const [inputValue, setInputValue] = useState('');
  var [currentWebsocket, setCurrentWebsocket] = useState<WebSocket | null>(null);
  
  const WSS_HANDSHAKE = '{"protocol":"json","version":1}\u001e';
  const SIGNAL_KEY = '\u001e';


  //---------- USING SignalR CLIENT ----------------------

  const useSignalRClient = ()=> {
    const newConnection = new signalR.HubConnectionBuilder()
      .withUrl('https://localhost:5556/SignalRHub/') // –ê–¥—Ä–µ—Å backend-—Ö–∞–±–∞
      .withAutomaticReconnect()
      .build();

    newConnection.start()
      .then(() => {
        console.log('‚úÖ SignalR –ø–æ–¥–∫–ª—é—á–µ–Ω.');
        setConnection(newConnection);
        sendMessage();

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        newConnection.on('Issue', (response: { data: string }) => {
          setMessages(prev => [...prev, response.data]);
        });
      })
      .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SignalR:', err));

    return () => {
      newConnection.stop(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    };
  };

  async function sendMessage(): Promise<void> {
    if (connection && inputValue) {
      try {
        await connection.invoke('GetIssues', { property1: inputValue });
        console.log('üì® –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', inputValue);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
      }
    }
  }


// ---------------- USING WebSocket DIRECTLY -----------------------------------

  function generateWebsocketRequest() {
    return {
      arguments: [{Property1: "Value of Property1"}],
      invocationId: '0',
      target: 'GetIssues',
      type: 1
    };
  };

  const connectWithWebsocket = () => {
    currentWebsocket?.close();
    currentWebsocket = new WebSocket('wss://localhost:5556/SignalRHub/');

    currentWebsocket.onopen = () => {
      currentWebsocket!.send(WSS_HANDSHAKE);
      currentWebsocket!.send(JSON.stringify(generateWebsocketRequest()) + SIGNAL_KEY);
      setCurrentWebsocket(currentWebsocket);
    };

    currentWebsocket.onmessage = (event) => {
      console.log(event.data);
    };

    currentWebsocket.onclose = (event) => {
      console.log("WebSocket closed.")
    };
  };










  return (
    <div style={{ padding: '20px' }}>
      <h1>SignalR Client</h1>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
        placeholder="–í–≤–µ–¥–∏—Ç–µ Property1"
      />
      <button onClick={useSignalRClient}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>

      <h2>–û—Ç–≤–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:</h2>
      <ul>
        {messages.map((msg, index) => (
          <li key={index}>{msg}</li>
        ))}
      </ul>
    </div>
  );
}

export default App;
